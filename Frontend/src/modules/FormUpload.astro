---
---

<div
	class="w-full flex flex-col items-center justify-center px-6 pt-8 mx-auto pt:mt-0 dark:bg-gray-900"
>
<div class="relative p-4 w-full max-w-2xl h-full md:h-auto">
	<!-- Modal content -->
	<div class="relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5">
		<!-- Modal header -->
		<div class="flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600">
			<h3 class="text-lg font-semibold text-gray-900 dark:text-white">
				Create Flashcards via AI
				<button
					data-popover-target="popover-description"
					data-popover-placement="bottom-end"
					type="button"
					><svg
						class="w-4 h-4 ml-2 text-gray-400 hover:text-gray-500"
						aria-hidden="true"
						fill="currentColor"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
						><path
							fill-rule="evenodd"
							d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z"
							clip-rule="evenodd"></path></svg
					><span class="sr-only">Show information</span></button>
			</h3>
			<div
				data-popover
				id="popover-description"
				role="tooltip"
				class="absolute z-10 invisible inline-block text-sm font-light text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-96 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400"
			>
				<div class="p-3 space-y-2">
					<h3 class="font-semibold text-gray-900 dark:text-white">
						Create Flashcards via AI
					</h3>
					<p>
						Simply input a PDF Document and with the Help of AI, we will provide you with a set of questions, to support your students learning.
					</p>
				</div>
			</div>
		</div>
		<!-- Modal body -->
		<form action="#">
			<div class="grid gap-4 mb-4 sm:grid-cols-2 overflow-hidden">
				<div>
					<label for="course" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Course</label>
					<select id="course" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
					</select>
	</div>
				<div>
					<label for="level" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Question Level</label>
					<select id="level" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
						<option selected="">Easy</option>
						<option value="Medium">Medium</option>
						<option value="Difficult">Difficult</option>

					</select>
				</div>
				<div class="col-span-full w-full">
		  
			<label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white" for="file_input">Upload file</label>
			<input class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400" aria-describedby="file_input_help" id="file_input" type="file" accept="application/pdf">
			<p class="mt-1 text-sm text-gray-500 dark:text-gray-300" id="file_input_help">PDF (Max. 30MB)</p>

		</div>
	  </div>
	</div>
			</div>
			<div class="flex items-center space-x-4">
				<button type="button" id="create-flashcards-button" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800 flex items-center justify-center">
					<div id="loading-indicator" class="hidden mr-2 flex space-x-1">
							<div class='h-1.5 w-1.5 bg-white rounded-full animate-bounce'></div>
							<div class='h-1.5 w-1.5 bg-white rounded-full animate-bounce [animation-delay:-0.15s]'></div>
							<div class='h-1.5 w-1.5 bg-white rounded-full animate-bounce [animation-delay:-0.3s]'></div>
					</div>
					Create Flashcards
			</button>
			</div>
		</form>
	</div>
</div>
</div>

<script>
  async function fetchCoursesForUser(userId) {
		const url = `https://futurist-edu-functions.azurewebsites.net/api/getcoursesforteacher/${userId}?code=Ik7K-56ckQBAOiKG8meuoAJq-Sq1-cqkQ7a3A2eO1G_JAzFufwXJoQ%3D%3D`;
		try {
			const response = await fetch(url);
			if (!response.ok) {
					throw new Error(`HTTP error! Status: ${response.status}`);
			}
			const courses = await response.json();
			populateCourseDropdown(courses)
	} catch (error) {
			console.error('Error fetching courses: ', error.message);
			return null;
	}
}

function populateCourseDropdown(courses) {
	const courseSelect = document.querySelector('#course');
	courses.forEach(course => {
			const option = document.createElement('option');
			option.value = course.CourseID;
			option.textContent = course.Name;
			courseSelect.appendChild(option);
	});
}

document.addEventListener('DOMContentLoaded', function() {
	fetchCoursesForUser(24);
	document.querySelector('#create-flashcards-button').addEventListener('click', createFlashcards);
});

async function createFlashcards() {
	try {
			const loadingIndicator = document.getElementById('loading-indicator');
			loadingIndicator.classList.remove('hidden');

			const fileInput = document.querySelector('#file_input');
			const levelSelect = document.querySelector('#level');
			const courseSelect = document.querySelector('#course');
			const formData = new FormData();
			formData.append('file', fileInput.files[0]);
			formData.append('level', levelSelect.value);

			const response = await fetch('https://futurist-edu-functions.azurewebsites.net/api/createquestionsandanswersfrompdf?code=TmLthQ-5OCdNso-AsxFc--13AeVR7m-Bzs6DjDxsIA0BAzFuMWY_bw%3D%3D', { 
					method: 'POST',
					body: formData
			});
			const flashcards = await response.json();
			console.log(flashcards);

			loadingIndicator.classList.add('hidden');

			const dataToSend = {
					courseId: courseSelect.value, 
					flashcards: flashcards
			};

			window.location.href = `/edit-flashcards?data=${encodeURIComponent(JSON.stringify(dataToSend))}`;
	} catch (error) {
			console.error('Error:', error);
			loadingIndicator.classList.add('hidden');
	}
}

</script>
